===============
USING JUPITER TOKEN BUY(SWAP)
===============


const fetch = require("node-fetch");
const readline = require("readline");
const {
  PublicKey,
  Connection,
  Transaction,
  Keypair,
  VersionedTransaction,
} = require("@solana/web3.js");

// === CONFIGURATION ===
const secretKey = Uint8Array.from([
  108, 21, 143, 211, 58, 75, 126, 232, 129, 80, 235, 79, 54, 219, 65, 240, 219,
  8, 209, 149, 36, 201, 209, 222, 99, 137, 247, 40, 40, 192, 176, 101, 121, 143,
  187, 138, 212, 169, 248, 219, 101, 113, 91, 6, 7, 189, 200, 222, 217, 141, 0,
  15, 213, 247, 164, 43, 131, 238, 201, 243, 31, 157, 146, 70,
]);

const keypair = Keypair.fromSecretKey(secretKey);
const userPublicKey = keypair.publicKey;

const inputMint = "So11111111111111111111111111111111111111112"; // SOL
const outputMint = "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v"; // USDC
const slippageBps = 50; // 0.5%

const connection = new Connection(
  "https://api.mainnet-beta.solana.com",
  "confirmed"
);

// === FUNCTIONS ===

async function getSolRequiredForUSDC(usdcAmount) {
  const url = https://lite-api.jup.ag/price/v2?ids=${outputMint}&vsToken=${inputMint};
  const res = await fetch(url);
  const data = await res.json();

  const usdcVsSolPrice = parseFloat(data.data[outputMint].price);
  const requiredSol = usdcAmount * usdcVsSolPrice;
  const lamports = Math.floor(requiredSol * 1e9);

  console.log(
    🔁 ${usdcAmount} USDC ≈ ${requiredSol.toFixed(
      6
    )} SOL (${lamports} lamports)
  );
  return lamports;
}

async function getQuote(lamports) {
  const url = https://lite-api.jup.ag/swap/v1/quote?inputMint=${inputMint}&outputMint=${outputMint}&amount=${lamports}&slippageBps=${slippageBps}&restrictIntermediateTokens=true;
  console.log("📡 Fetching quote from Jupiter...");

  const res = await fetch(url);
  if (!res.ok) throw new Error(Quote failed: ${res.status} ${res.statusText});
  const data = await res.json();

  if (!data !data.routePlan data.routePlan.length === 0) {
    throw new Error("No valid route found.");
  }

  console.log("✅ Quote received.");
  return data;
}

async function buildSwapTransaction(quoteResponse) {
  console.log("🧱 Building transaction...");

  const res = await fetch("https://lite-api.jup.ag/swap/v1/swap", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      quoteResponse,
      userPublicKey: userPublicKey.toBase58(),
      dynamicComputeUnitLimit: true,
      dynamicSlippage: true,
      prioritizationFeeLamports: {
        priorityLevelWithMaxLamports: {
          maxLamports: 1000000,
          priorityLevel: "veryHigh",
        },
      },
    }),
  });

  if (!res.ok) {
    const errText = await res.text();
    throw new Error(
      Swap API failed: ${res.status} ${res.statusText} - ${errText}
    );
  }

  const swapResponse = await res.json();
  if (!swapResponse.swapTransaction)
    throw new Error("No transaction returned.");
  console.log("✅ Swap transaction built.");
  return swapResponse.swapTransaction;
}

async function sendTransaction(base64Tx) {
  console.log("🚀 Sending transaction to Solana...");

  const txBuffer = Buffer.from(base64Tx, "base64");
  const versionedTx = VersionedTransaction.deserialize(txBuffer);

  versionedTx.sign([keypair]);
  const rawTx = versionedTx.serialize();

  const signature = await connection.sendRawTransaction(rawTx, {
    maxRetries: 2,
    skipPreflight: true,
  });

  console.log("✅ Sent! Tx Signature:", signature);
  const confirmation = await connection.confirmTransaction(
    { signature },
    "finalized"
  );

  if (confirmation.value.err) {
    throw new Error(
      Transaction failed: ${JSON.stringify(
        confirmation.value.err
      )}\nhttps://solscan.io/tx/${signature}
    );
  }

  console.log(🎉 Confirmed: https://solscan.io/tx/${signature});
}

async function main() {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  rl.question("💵 Enter USDC amount to swap from SOL: ", async (input) => {
    rl.close();  




